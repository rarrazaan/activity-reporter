// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	model "activity-reporter/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PhotoRepo is an autogenerated mock type for the PhotoRepo type
type PhotoRepo struct {
	mock.Mock
}

// AddPhoto provides a mock function with given fields: ctx, photo
func (_m *PhotoRepo) AddPhoto(ctx context.Context, photo model.Photo) (model.Photo, error) {
	ret := _m.Called(ctx, photo)

	var r0 model.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Photo) (model.Photo, error)); ok {
		return rf(ctx, photo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Photo) model.Photo); ok {
		r0 = rf(ctx, photo)
	} else {
		r0 = ret.Get(0).(model.Photo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Photo) error); ok {
		r1 = rf(ctx, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPhotoRepo creates a new instance of PhotoRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPhotoRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *PhotoRepo {
	mock := &PhotoRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
