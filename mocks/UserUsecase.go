// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	dto "activity-reporter/shared/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "activity-reporter/model"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, user
func (_m *UserUsecase) Login(ctx context.Context, user model.User) (dto.LoginRes, error) {
	ret := _m.Called(ctx, user)

	var r0 dto.LoginRes
	if rf, ok := ret.Get(0).(func(context.Context, model.User) dto.LoginRes); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(dto.LoginRes)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, user
func (_m *UserUsecase) Register(ctx context.Context, user model.User) (dto.UserRes, error) {
	ret := _m.Called(ctx, user)

	var r0 dto.UserRes
	if rf, ok := ret.Get(0).(func(context.Context, model.User) dto.UserRes); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(dto.UserRes)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUsecase(t mockConstructorTestingTNewUserUsecase) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
