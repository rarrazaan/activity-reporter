// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	model "mini-socmed/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserPhotoRepo is an autogenerated mock type for the UserPhotoRepo type
type UserPhotoRepo struct {
	mock.Mock
}

// AddPhoto provides a mock function with given fields: ctx, photo
func (_m *UserPhotoRepo) AddPhoto(ctx context.Context, photo *model.UserPhoto) (*model.UserPhoto, error) {
	ret := _m.Called(ctx, photo)

	var r0 *model.UserPhoto
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserPhoto) (*model.UserPhoto, error)); ok {
		return rf(ctx, photo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserPhoto) *model.UserPhoto); ok {
		r0 = rf(ctx, photo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserPhoto)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UserPhoto) error); ok {
		r1 = rf(ctx, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserPhotoRepo creates a new instance of UserPhotoRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserPhotoRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserPhotoRepo {
	mock := &UserPhotoRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
