// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	dto "mini-socmed/internal/shared/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "mini-socmed/internal/model"
)

// PhotoUsecase is an autogenerated mock type for the PhotoUsecase type
type PhotoUsecase struct {
	mock.Mock
}

// PostPhoto provides a mock function with given fields: ctx, photo
func (_m *PhotoUsecase) PostPhoto(ctx context.Context, photo *model.Photo) (*dto.PhotoRes, error) {
	ret := _m.Called(ctx, photo)

	var r0 *dto.PhotoRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Photo) (*dto.PhotoRes, error)); ok {
		return rf(ctx, photo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Photo) *dto.PhotoRes); ok {
		r0 = rf(ctx, photo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.PhotoRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Photo) error); ok {
		r1 = rf(ctx, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPhotoUsecase creates a new instance of PhotoUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPhotoUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *PhotoUsecase {
	mock := &PhotoUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
